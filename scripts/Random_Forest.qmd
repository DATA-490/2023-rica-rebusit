---
title: "LDA_GCF"
format: html
editor: visual
---

TODO

-   rename the LDA columns 1 through 5 to "topic_1" through "topic_5"
-   bind_cols() the gcf data across years before you create quarter
-   then lastly left join GCF onto LDA
-   currently all LDA info is on contract year 2020-21, nothing from 21-22. I will work on getting that for you.
    -   then you will have to rebuild the LDA model.
-   Do a brief EDA to understand the distribution of responses and missingness on the final merged dataset.
-   identify 1-2 classification models that can be used for

## Load Libraries and Read in Data

```{r}
library(tidyverse)
library(randomForest)
```

```{r}
load("data/lda_topic_probability_20_22.Rdata") #20-22
#load("data/lda_topic_probability.Rdata") #20-21 <- don't need?

gcf20_21 <- read_csv("data/2020-2021_gcf_data_for_partnership_analysis.csv") %>%
  select(c("shortcode", "prescreens", "totalapps", "contract_year", "month"))

gcf21_22 <- read_csv("data/2021-2022_gcf_data_for_partnership_analysis.csv") %>%
  select(c("shortcode", "prescreens", "totalapps", "contract_year", "month"))
```

Keeping `shortcode`, `prescreens`, `totalapps`, and `contract_year` , `month` columns in gcf data

# Merging Data

Starting by renaming `y2n` column from `partnership_topic` to `shortcode` and `year` to `contract_year` in order to merge with the gcf data.

Note: `shortcode` = subcontractor

Rename topic probability columns (1-5) to `topic_1`-`topic_5`

```{r}
partnership_topic <- partnership_topic %>% 
  rename(shortcode = y2n, 
         contract_year = year,
         topic_1 = "1",
         topic_2 = "2",
         topic_3 = "3",
         topic_4 = "4",
         topic_5 = "5")
str(partnership_topic)
```

Splitting `partnership_topic` in two different contract years

```{r}
partner_topic_20_21 <- filter(partnership_topic, contract_year == "2020-2021")
partner_topic_21_22 <- filter(partnership_topic, contract_year == "2021-2022")
head(partner_topic_20_21)
head(partner_topic_21_22)
```

Now merging with the respective gcf years

First creating `quarter` column because the gcf data does not have one.

Months 10-12 = quarter 1

Months 1-3 = quarter 2

Months 4-6 = quarter 3

Months 7-9 = quarter 4

```{r}
head(gcf20_21)
head(gcf21_22)
```

Creating `quarter` for `gcf20_21` first

```{r}
gcf20_21 <- gcf20_21 %>%
  mutate(quarter = case_when(
    month %in% c(10,11,12) ~ 1,
    month %in% c(1,2,3) ~ 2,
    month %in% c(4,5,6) ~ 3,
    month %in% c(7,8,9) ~ 4
  )) %>%
  select(c("shortcode", "prescreens", "totalapps", "contract_year", "quarter"))
head(gcf20_21)
```

Aggregate before merge

```{r}
gcf20_21 <- gcf20_21 %>%
  group_by(shortcode, quarter, contract_year) %>%
  summarise(across(where(is.numeric), sum))
head(gcf20_21)
```

Then merging `partner_topic_20_21` data with `gcf20_21` merging by `shortcode`, `calendar_year`, and `quarter` using left join.

```{r}
lda_gcf20_21 <- left_join(partner_topic_20_21, gcf20_21, by = c("shortcode", "contract_year", "quarter"))
head(lda_gcf20_21)
```

Now creating `quarter` for `gcf_21-22`

```{r}
gcf21_22 <- gcf21_22 %>%
  mutate(quarter = case_when(
    month %in% c(10,11,12) ~ 1,
    month %in% c(1,2,3) ~ 2,
    month %in% c(4,5,6) ~ 3,
    month %in% c(7,8,9) ~ 4
  )) %>%
  select(c("shortcode", "prescreens", "totalapps", "contract_year", "quarter"))
head(gcf21_22)
```

Aggregate before merge

```{r}
gcf21_22 <- gcf21_22 %>%
  group_by(shortcode, quarter, contract_year) %>%
  summarise(across(where(is.numeric), sum))
head(gcf21_22)
```

Then merging `partner_topic_21_22` data with `gcf21_22` merging by `shortcode`, `calendar_year`, and `quarter` using left join.

```{r}
lda_gcf21_22 <- left_join(partner_topic_21_22, gcf21_22, by = c("shortcode", "contract_year", "quarter"))
head(lda_gcf21_22)
```

# Random Forest Classification

First making a random forest model for `lda_gcf_20_21`

Removing columns `contract_year`, `descrip`, and `document` for importance graph and making `quarter` and `level` a factor type

```{r}
lda_gcf20_21 <- select(lda_gcf20_21, -c("contract_year", "descrip", "document"))
lda_gcf20_21$quarter <- as.factor(lda_gcf20_21$quarter)
lda_gcf20_21$level <- as.factor(lda_gcf20_21$level)
str(lda_gcf20_21)
```

Training and testing data

```{r}
tra.tes <- sample(nrow(lda_gcf20_21), 0.7*nrow(lda_gcf20_21))
tra <- lda_gcf20_21[tra.tes, ]
tes <- lda_gcf20_21[-tra.tes, ]
tra <- tra[complete.cases(tra), ]
```

Training `lda_gcf20_21` in random forest

```{r}
set.seed(123)
rf20_21 <- randomForest(level ~ ., data = tra, proximity = TRUE, importance = TRUE)
rf20_21
```

Creating an importance graph

```{r}
importance <- as.data.frame(round(importance(rf20_21), digits = 4))
mdg <- importance[, "MeanDecreaseGini"]
df <- data.frame(feature = row.names(importance), importance = mdg)
```

```{r}
ggplot(df, aes(x = feature, y = importance)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  labs(title = "Important Variables to Predict Activity Priority", x = "Variable", y = "Importance") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
```

Update the random forest model with new data to make it still relevant and improve over time

So we should bind the `lda_gcf20_21` and `lda_gcf21_22` data together

```{r}
lda_gcf21_22 <- select(lda_gcf21_22, -c("contract_year", "descrip", "document"))
lda_gcf21_22$quarter <- as.factor(lda_gcf21_22$quarter)
lda_gcf21_22$level <- as.factor(lda_gcf21_22$level)
head(lda_gcf21_22)
```

Binding

```{r}
lda_gcf20_22 <- rbind(lda_gcf20_21, lda_gcf21_22)
```

Retrain random forest model

```{r}
tra.tes <- sample(nrow(lda_gcf20_22), 0.7*nrow(lda_gcf20_22))
tra <- lda_gcf20_22[tra.tes, ]
tes <- lda_gcf20_22[-tra.tes, ]
tra <- tra[complete.cases(tra), ]
```

```{r}
set.seed(123)
rf20_22 <- randomForest(level ~ ., data = tra, proximity = TRUE, importance = TRUE)
rf20_22
```

# EDA

EDA on merged data: `lda_gcf20_22`

```{r}
summary(lda_gcf20_22)
sum(is.na(lda_gcf20_22)) #400 mising values
```

```{r}
hist(lda_gcf20_22$totalapps) #Right skewed
```

```{r}
ggplot(lda_gcf20_22, aes(totalapps, color = shortcode)) + geom_histogram()
```

```{r}
ggplot(lda_gcf20_22, aes(totalapps, shortcode)) + geom_boxplot()
```

Linear relationship between `totalapps` and `prescreens`

```{r}
ggplot(lda_gcf20_22, aes(totalapps, prescreens, color = shortcode)) + geom_point(alpha = 0.1) + geom_smooth(method = "lm", se = FALSE)
```

Want to see which quarter gets more applications

1-3 get more applications than 4

```{r}
ggplot(lda_gcf20_22, aes(totalapps, shortcode, fill = quarter)) + geom_bar(stat = "identity", position = position_dodge())
```

Models in question: Random forest for prediction, support vector machine- train the model on a labeled dataset that includes text descriptions and their corresponding topic probabilities and priority levels. The SVM would learn to classify the priority level based on the topic probabilities. k-fold cross validation
